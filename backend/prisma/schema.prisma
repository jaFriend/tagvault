// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String @id @default(uuid())
  clerkId           String @unique
  username          String @unique
  artifacts         Artifact[]
  tags              Tag[]
//  sentFriendships   Friendship[] @relation("Initiator")
//  receivedFriendships Friendship[] @relation("Recipient")
}
//model Friendship {
//  id        String   @id @default(uuid())
//  createdAt DateTime @default(now())
//  updatedAt DateTime @updatedAt
//  acceptedAt DateTime?
//  status FriendshipStatus @default(PENDING)
//  initiatorId String
//  initiator   User    @relation("Initiator", fields: [initiatorId], references: [id])
//  recipientId String
//  recipient   User    @relation("Recipient", fields: [recipientId], references: [id])
//  @@unique([initiatorId, recipientId])
//  @@index([recipientId])
//}

model Artifact {
  id            String    @id @default(uuid()) 
  userId        String
  user          User      @relation(fields: [userId], references: [clerkId], onDelete: Cascade)

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  title         String?
  textContent   String?
  fileName      String?
  fileUrl       String?
  fileSize      Int?
  tags Tag[]
  fileType      FileType
  isImage       Boolean   @default(false) 
}

model Tag {
  id          String    @id @default(uuid())
  name        String
  userId      String
  user        User      @relation(fields: [userId], references: [clerkId], onDelete: Cascade)
  @@unique([userId, name])
  artifacts   Artifact[]  
}

enum FileType {
  TEXT
  FILE
}


